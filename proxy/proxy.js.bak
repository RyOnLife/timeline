var httpProxy = require('http-proxy');
var https = require('https');
var querystring = require('querystring');
var Hoptoad = require('./hoptoad-notifier').Hoptoad;

// http://127.0.0.1:5984/timeline/_design/timeline/index.html

Hoptoad.key = 'fc48013989cadeb32a1a262a3dab7cb1';
process.on('uncaughtException', function(err) {
  Hoptoad.notify(err);
});

// Changes a Facebook token into a Facebook ID, and verifies friend lists, to prevent any funny business
var FbAuth = function() {
  var self = this;
  this.authenticated = {};
  this.authenticate = function(token) {
    self.authenticated[token] = {fbId: null, friends: null, timestamp: new Date()};
    // FB UID
    var dataMe = ''
    var reqMe = https.request({host: 'graph.facebook.com', path: '/me?'+querystring.stringify({access_token: token})}, function(res) {
      res.on('data', function(data) {
        dataMe += data.toString('utf8');
      });
      res.on('end', function() {
        dataMe = JSON.parse(dataMe);
        if (self.authenticated[token] && res.statusCode == 200) {
          // Succesful API calls
          self.authenticated[token].fbId = dataMe.id;
          console.log('Facebook user '+dataMe.id);
        } else {
          // API error
          delete self.authenticated[token];
          console.error(data);
        }
      });
    });
    reqMe.on('error', function(e) {
      delete self.authenticated[token];
    });
    reqMe.end();
    // FB friends
    var dataFriends = ''
    var reqFriends = https.request({host: 'graph.facebook.com', path: '/me/friends?'+querystring.stringify({access_token: token})}, function(res) {      
      res.on('data', function(data) {
        dataFriends += data.toString('utf8');
      });
      res.on('end', function() {
        dataFriends = JSON.parse(dataFriends);
        if (self.authenticated[token] && res.statusCode === 200) {
          // Succesful API call
          var fbIds = [];
          for (var i = 0; i < dataFriends.data.length; i++) {
            fbIds.push(dataFriends.data[i].id);
          }
          self.authenticated[token].friends = fbIds;
          console.log('Facebook friend count '+fbIds.length);
        } else {
          // API error
          delete self.authenticated[token];
          console.error(data);
        }
        expireCache();
      });
    });
    reqFriends.on('error', function(e) {
      delete self.authenticated[token];
    });
    reqFriends.end();
  };
  function expireCache() {
    // Expire old authentication objects from the cache
    // Cached authenticated objects should not be older than an hour
    var now = new Date();
    var oldestSurvivor = null;
    for (var i = 0; i < self.authenticated.length; i++) {
      if (self.authenticated[i].timestamp - now < 3600000) {
        oldestSurvivor = i;
        break;
      }
    }
    if (oldestSurvivor) {
      self.authenticated.splice(0, oldestSurvivor);
    }
    // Cache should not contain more than 25,000 keys
    if (self.authenticated.length > 25000) {
      self.authenticated.splice(0, 1);
    }
  }
};

var fbAuth = new FbAuth();
httpProxy.createServer(function(req, res, proxy) {
  // Get the request body
  var body = ''
  req.on('data', function(data) {
    body += data;
  });
  // Finished receiving request
  req.on('end', function() {
    body = 'token=121822724510409%257C2.AQB0DYwYZHU_Gr6o.3600.1309420800.1-569255561%257CuOZ4BWQiscuvsQMnlRUwnOUoPqs'
    var params = querystring.parse(body);
    var authStarted = false;
    var authAttempt = setInterval(function() {
      if (!authStarted && !fbAuth.authenticated[params.token]) {
        // User has not been authenticated
        console.log('Authenticating...');
        authStarted = true;
        fbAuth.authenticate(params.token);
      } else if (fbAuth.authenticated[params.token] && fbAuth.authenticated[params.token].fbId && fbAuth.authenticated[params.token].friends) {
        // User has been authenticated
        console.log('Proxying...');
        clearInterval(authAttempt);
        res.writeHead(200);
        res.end();
        // Read, create, write access
        // db: https://app584241.heroku.cloudant.com/timeline/
        // key: meneveguentenerestakewhi
        // password: 4NmBXtNCpylinPauG5SEmSrV
        // proxy.proxyRequest(req, res, {host: 'localhost', port: 5984});
      } else if (authStarted && !fbAuth.authenticated[params.token]) {
        // Authentication failed
        clearInterval(authAttempt);
        res.writeHead(401);
        res.end();
      }
      // else: just wait for Facebook Graph API calls to return
    }, 100);
  });
}).listen(8000);
console.log('CouchDB proxy running at http://localhost:8000/');
